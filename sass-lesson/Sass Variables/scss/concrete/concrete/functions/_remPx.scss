/*
remPx - http://davidwalsh.name/rem-px-browser-function-sass

 */


$pixelBase : 16; /* This variable refers to the default browser's font-size, 
                  and 1rem = 16px. For more maintainability, we store the value 
                  in a variable in order to reuse it or to change it easily. */

@function parseInt($n) {
	@return $n / ($n * 0 + 1); /* This function returns a number from a string,
       thanks Hugo for it! http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/ */
}

@function u($values){ /* We called our function u because it's faster to type. u also stands for 'unit'. 
            This function takes one argument which is an array of REM or PX values. */

      $list: (); /* We define a new list, where we'll store new values. */

      @each $value in $values { /* For each value passed in $values argument, 
            test the current value and store it in the $list array. */

            $unit : unit($value); /* This Sass function returns the unit
                         associated with a number. In our case, PX or REM. */

            $val  : parseInt($value); /* Return a number from a string */

            @if ($px-only) and ($unit == 'rem') { /* If 'pixels only' mode is active and unit 
            value is rem, convert rem value in pixels and push it into $list array. */
                  $list: append($list, ($val * $pixelBase) + px); 
            }

            @else if($unit == 'px') or ($unit == 'rem'){ /* If the units are px or rem, we 
                  just push value into list. */
                  $list: append($list, $value);
            }

            @else {
                  @warn 'There is no unit conversion for #{$unit}'; /* Warn for this. */
            }

      }

      @return $list(); /* return the whole list as clean vanilla css values */

}

@function uPX($values){ /* We called our function u because it's faster to type. u also stands for 'unit'. 
            This function takes one argument which is an array of REM or PX values. */

      $list: (); /* We define a new list, where we'll store new values. */

      @each $value in $values { /* For each value passed in $values argument, 
            test the current value and store it in the $list array. */

            $unit : unit($value); /* This Sass function returns the unit
                         associated with a number. In our case, PX or REM. */

            $val  : parseInt($value); /* Return a number from a string */

            $list: append($list, ($val * $pixelBase) + px); 
            
      }

      @return $list(); /* return the whole list as clean vanilla css values */

}

@mixin compat($name, $units)
{
      #{$name}: uPX(#{$units});
      #{$name}: u(#{$units});
}

